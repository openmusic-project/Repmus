; OM File Header - Saved 2025/02/21 13:26:17
; (7.05 :patc (om-make-point 354 247) (om-make-point 12 4) (om-make-point 1215 699) "" 183 0 nil "2025/02/21 13:26:17")
; End File Header
(in-package :om)(load-lib-for (quote ("Repmus")))(setf *om-current-persistent* (om-load-patch1 "graph-tour" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 441 46) (quote "Ported from Patchwork (Paulo Raposo/2025)") "" (om-make-point 468 10) nil (om-make-color 0 0 0) (om-make-font "Verdana" 21 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 115 130) (quote "Alternatively it is $possible to create$a predicate with a$patch in lambda$mode.$This patch is$exactly the same$as the previous$example.") "" (om-make-point 1015 144) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 1001 89) (om-make-point 26 28) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 951 90) (om-make-point 38 28) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "predicate" (om-load-patch-abs1 "predicate" (quote ((let ((box (om-load-boxin "tolerance" 3 (om-make-point 241 267) "" "tolerance" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM- 2" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 156 219) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "value" 2 (om-make-point 80 152) "" "value" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 145 395) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM<=" (quote om<=) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 155 342) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ABS" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 143 265) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 156 154) (om-make-point 33 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "y" 1 (om-make-point 199 52) "" "y" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "x" 0 (om-make-point 97 53) "" "x" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 0 nil 0) (6 0 1 1 nil 0) (4 0 3 0 nil 0) (5 0 4 0 nil 0) (0 0 4 1 nil 0) (1 0 5 0 nil 0) (7 0 6 0 nil 1) (8 0 6 1 nil 2))) 7.05 nil "" (om-make-point 370 92) (om-make-point 533 433)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil))) (om-make-point 947 130) nil (list nil) "l" "predicate"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-GRAPH 2" (quote make-graph) (quote ((om-load-inputfun (quote input-funbox) "A chordseq, a list of chords, a list of list of midics" "COLL" nil) (om-load-inputfun (quote input-funbox) "A predicate" "PRED" nil))) (om-make-point 905 220) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GRAPH-TOUR 3" (quote graph-tour) (quote ((om-load-inputfun (quote input-funbox) "a Graph" "GRAPH" nil) (om-load-inputfun (quote input-funbox) "A number" "SOLU" 6) (om-load-inputfunmenu1 (quote input-funmenu) "A number" "LINK" 2 (list (list "without link" 1) (list "with link" 2))) (om-load-inputfunmenu1 (quote input-funmenu) "A number" "ORDER" 1 (list (list "maximize" 1) (list "minimize" 2))) (om-load-inputfunmenu1 (quote input-funmenu) "A number" "TRAV" 1 (list (list "short path" 1) (list "long path" 2))) (om-load-inputfunmenu1 (quote input-funmenu) "A number" "STAT" 1 (list (list "one solution" 1) (list "statistics" 2))))) (om-make-point 928 307) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 7" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 862 386) (om-make-point 270 114) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4900 5300 5900 6200) (5100 5400 5900 6300) (5200 5700 6000 6400) (5100 5800 6100 6500) (4900 5200 5900 6300 6900) (5300 5700 6000) (4600 5100 5400 5800) (4600 4900 5500 5900) (4300 4700 5000 5500) (4300 4800 5100 5700) (4300 4600 5200 5600) (4300 5200 5500 6100) (4300 4600 5300) (4300 4900 5300 5900 6200 6700) (4900 4900 5300 5600) (4300 4600 5000) (4300 5200 5500 5900) (4600 5000 5300) (5100 5400 5800) (5100 5100 5400 5800 6300) (5300 5900 6300 7000) (5300 5300 5900 6200 6600) (5300 6000 6400 6700) (4900 5300 5800 6100) (4900 5300 5900 6200))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000 25000)) :ldur (quote ((1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000))) :lvel (quote ((100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100 100) (100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100) (100 100 100 100 100 100) (100 100 100 100) (100 100 100) (100 100 100 100) (100 100 100) (100 100 100) (100 100 100 100 100) (100 100 100 100) (100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0))) :lchan (quote ((1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1) (1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx onset measure)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 474 269) (om-make-point 793 317) 0 1000 nil 1 (quote :fluidsynth) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2 nil nil)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 6" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 850 610) (om-make-point 270 114) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4900) (5300) (5900) (6200) (5100) (5400) (6300) (5200) (5700) (6000) (6400) (5100) (5800) (6100) (6500) (4900) (5200) (5900) (6300) (6900) (5300) (5700) (6000) (4600) (5100) (5400) (5800) (4900) (5500) (5900) (4300) (4700) (5000) (4800) (5100) (5700) (4600) (5200) (5600) (5500) (6100) (4600) (5300) (4900) (5900) (6200) (6700) (5600) (4300) (4600) (5000) (5200) (5500) (5900) (4600) (5000) (5300) (5100) (5400) (5800) (6300) (5300) (5900) (7000) (6200) (6600) (6000) (6400) (6700) (4900) (5800) (6100) (5900) (6200))) :lonset (quote (0 0 0 0 1000 1000 1000 2000 2000 2000 2000 3000 3000 3000 3000 4000 4000 4000 4000 4000 5000 5000 5000 6000 6000 6000 6000 7000 7000 7000 8000 8000 8000 9000 9000 9000 10000 10000 10000 11000 11000 12000 12000 13000 13000 13000 13000 14000 15000 15000 15000 16000 16000 16000 17000 17000 17000 18000 18000 18000 19000 20000 20000 20000 21000 21000 22000 22000 22000 23000 23000 23000 24000 24000 26000)) :ldur (quotelvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx onset measure)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 435 257) (om-make-point 934 293) 0 1000 nil 1 (quote :fluidsynth) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2 nil nil)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHSEQ->POLY 3" (quote chseq->poly) (quote ((om-load-inputfun (quote input-funbox) "" "CHSEQ" nil) (om-load-inputfun (quote input-funbox) "" "APPROX" 2))) (om-make-point 926 520) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 131 78) (quote "For 1/2 tone step$relationship, connect$this to 'pred' input $of make-graph$") "" (om-make-point 704 204) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 124 65) (quote "The same here, but$transformed into a$polyphony with$chseq->poly") "" (om-make-point 173 537) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 181 52) (quote "Eval the chord-seq below$to get a chord sequence$with a max of common notes.") "" (om-make-point 136 333) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 149 26) (quote "A set of random chords.") "" (om-make-point 214 19) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHSEQ->POLY 2" (quote chseq->poly) (quote ((om-load-inputfun (quote input-funbox) "" "CHSEQ" nil) (om-load-inputfun (quote input-funbox) "" "APPROX" 2))) (om-make-point 482 530) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 5" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 439 623) (om-make-point 270 114) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4900) (5300) (5900) (6200) (5100) (5400) (6300) (5200) (5700) (6000) (6400) (5100) (5800) (6100) (6500) (4900) (5200) (5900) (6300) (6900) (5300) (5700) (6000) (4600) (5100) (5400) (5800) (4900) (5500) (5900) (4300) (4700) (5000) (4800) (5100) (5700) (4600) (5200) (5600) (5500) (6100) (4600) (5300) (4900) (5900) (6200) (6700) (5600) (4300) (4600) (5000) (5200) (5500) (5900) (4600) (5000) (5300) (5100) (5400) (5800) (6300) (5300) (5900) (7000) (6200) (6600) (6000) (6400) (6700) (4900) (5800) (6100) (5900) (6200))) :lonset (quote (0 0 0 0 1000 1000 1000 2000 2000 2000 2000 3000 3000 3000 3000 4000 4000 4000 4000 4000 5000 5000 5000 6000 6000 6000 6000 7000 7000 7000 8000 8000 8000 9000 9000 9000 10000 10000 10000 11000 11000 12000 12000 13000 13000 13000 13000 14000 15000 15000 15000 16000 16000 16000 17000 17000 17000 18000 18000 18000 19000 20000 20000 20000 21000 21000 22000 22000 22000 23000 23000 23000 24000 24000 26000)) :ldur (quotelvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.05 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx onset measure)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 435 257) (om-make-point 934 293) 0 1000 nil 1 (quote :fluidsynth) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2 nil nil)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 4" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 418 396) (om-make-point 270 114) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4900 5300 5900 6200) (5100 5400 5900 6300) (5200 5700 6000 6400) (5100 5800 6100 6500) (4900 5200 5900 6300 6900) (5300 5700 6000) (4600 5100 5400 5800) (4600 4900 5500 5900) (4300 4700 5000 5500) (4300 4800 5100 5700) (4300 4600 5200 5600) (4300 5200 5500 6100) (4300 4600 5300) (4300 4900 5300 5900 6200 6700) (4900 4900 5300 5600) (4300 4600 5000) (4300 5200 5500 5900) (4600 5000 5300) (5100 5400 5800) (5100 5100 5400 5800 6300) (5300 5900 6300 7000) (5300 5300 5900 6200 6600) (5300 6000 6400 6700) (4900 5300 5800 6100) (4900 5300 5900 6200))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000 25000)) :ldur (quote ((1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000))) :lvel (quote ((100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100 100) (100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100) (100 100 100 100 100 100) (100 100 100 100) (100 100 100) (100 100 100 100) (100 100 100) (100 100 100) (100 100 100 100 100) (100 100 100 100) (100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0))) :lchan (quote ((1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1) (1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.05 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx onset measure)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 474 269) (om-make-point 793 317) 0 1000 nil 1 (quote :fluidsynth) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2 nil nil)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 52 396) (om-make-point 270 114) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4900 5300 5900 6200) (4900 5300 5900 6200 6700) (4600 4900 5500 5900) (4900 5200 5900 6300 6900) (5100 5400 5900 6300) (5100 5400 5800 6300) (4600 5100 5400 5800) (5100 5400 5800) (5100 5800 6100 6500) (4900 5300 5800 6100) (4900 5300 5600) (5300 5900 6300 7000) (5200 5500 5900) (5200 5500 6100) (5200 5300 6000 6400 6700) (5300 5700 6000) (5200 5700 6000 6400) (4300 4800 5100 5700) (4300 4600 5000) (4300 4600 5300) (4600 5000 5300) (4300 4600 5200 5600) (4300 4700 5000 5500) (4300 5300 5900 6200 6600) (4900 5300 5900 6200))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000 25000)) :ldur (quote ((1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000))) :lvel (quote ((100 100 100 100) (100 100 100 100 100) (100 100 100 100) (100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100) (100 100 100 100) (100 100 100) (100 100 100) (100 100 100 100 100) (100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100 100) (100 100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0))) :lchan (quote ((1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1) (1 1 1) (1 1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.05 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx onset measure)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 435 257) (om-make-point 972 307) 0 1000 nil 1 (quote :fluidsynth) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2 nil nil)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 55 621) (om-make-point 270 114) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4900) (5300) (5900) (6200) (6700) (4600) (5500) (5200) (6300) (6900) (5100) (5400) (5800) (4600) (6100) (6500) (4900) (5300) (5600) (5900) (6300) (7000) (5200) (5500) (6100) (5300) (6000) (6400) (6700) (5700) (5200) (6400) (4300) (4800) (5100) (4600) (5000) (5300) (5000) (4300) (5200) (5600) (4700) (5000) (5500) (5300) (5900) (6200) (6600) (4900))) :lonset (quote (0 0 0 0 1000 2000 2000 3000 3000 3000 4000 4000 5000 6000 8000 8000 9000 9000 10000 11000 11000 11000 12000 12000 13000 14000 14000 14000 14000 15000 16000 16000 17000 17000 17000 18000 18000 19000 20000 21000 21000 21000 22000 22000 22000 23000 23000 23000 23000 24000 25000)) :ldur (quote ((4000) (2000) (5000) (2000) (1000) (1000) (1000) (1000) (3000) (1000) (5000) (4000) (5000) (1000) (2000) (1000) (2000) (3000) (1000) (2000) (1000) (1000) (3000) (2000) (1000) (2000) (3000) (1000) (1000) (3000) (1000) (1000) (3000) (1000) (1000) (4000) (1000) (2000) (1000) (3000) (1000) (1000) (1000) (1000) (1000) (2000) (2000) (2000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx onset measure)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 435 257) (om-make-point 793 337) 0 1000 nil 1 (quote :fluidsynth) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2 nil nil)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GRAPH-TOUR 2" (quote graph-tour) (quote ((om-load-inputfun (quote input-funbox) "a Graph" "GRAPH" nil) (om-load-inputfun (quote input-funbox) "A number" "SOLU" 6) (om-load-inputfunmenu1 (quote input-funmenu) "A number" "LINK" 2 (list (list "without link" 1) (list "with link" 2))) (om-load-inputfunmenu1 (quote input-funmenu) "A number" "ORDER" 1 (list (list "maximize" 1) (list "minimize" 2))) (om-load-inputfunmenu1 (quote input-funmenu) "A number" "TRAV" 1 (list (list "short path" 1) (list "long path" 2))) (om-load-inputfunmenu1 (quote input-funmenu) "A number" "STAT" 1 (list (list "one solution" 1) (list "statistics" 2))))) (om-make-point 484 317) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GRAPH-TOUR" (quote graph-tour) (quote ((om-load-inputfun (quote input-funbox) "a Graph" "GRAPH" nil) (om-load-inputfun (quote input-funbox) "A number" "SOLU" 6) (om-load-inputfunmenu1 (quote input-funmenu) "A number" "LINK" 2 (list (list "without link" 1) (list "with link" 2))) (om-load-inputfunmenu1 (quote input-funmenu) "A number" "ORDER" 1 (list (list "maximize" 1) (list "minimize" 2))) (om-load-inputfunmenu1 (quote input-funmenu) "A number" "TRAV" 1 (list (list "short path" 1) (list "long path" 2))) (om-load-inputfunmenu1 (quote input-funmenu) "A number" "STAT" 1 (list (list "one solution" 1) (list "statistics" 2))))) (om-make-point 70 312) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-GRAPH 3" (quote make-graph) (quote ((om-load-inputfun (quote input-funbox) "A chordseq, a list of chords, a list of list of midics" "COLL" nil) (om-load-inputfun (quote input-funbox) "A predicate" "PRED" nil))) (om-make-point 461 222) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHSEQ->POLY" (quote chseq->poly) (quote ((om-load-inputfun (quote input-funbox) "" "CHSEQ" nil) (om-load-inputfun (quote input-funbox) "" "APPROX" 2))) (om-make-point 57 537) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 673 206) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 155 53) (om-make-point 270 114) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5300 5900 6300 7000) (4300 4600 5200 5600) (4900 5300 5600) (4900 5300 5900 6200 6700) (4300 4700 5000 5500) (5200 5700 6000 6400) (4900 5300 5900 6200) (5100 5400 5800 6300) (5200 5500 5900) (5100 5400 5800) (4900 5300 5800 6100) (4600 5000 5300) (5100 5400 5900 6300) (4300 4600 5300) (4300 4600 5000) (5100 5800 6100 6500) (5300 5900 6200 6600) (5200 5500 6100) (4900 5200 5900 6300 6900) (4300 4800 5100 5700) (5300 6000 6400 6700) (5300 5700 6000) (4600 5100 5400 5800) (4600 4900 5500 5900))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000)) :ldur (quotelvel (quote ((100 100 100 100) (100 100 100 100) (100 100 100) (100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100) (100 100 100) (100 100 100 100) (100 100 100) (100 100 100 100) (100 100 100) (100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100) (100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100) (100 100 100 100) (100 100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0))) :lchan (quote ((1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.05 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx onset measure)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 61 223) (om-make-point 1099 357) 0 1000 nil 1 (quote :fluidsynth) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2 nil nil)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 609 204) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MK-PRED" (quote mk-pred) (quote ((om-load-inputfun (quote input-funbox) "value" "VALUE" 0) (om-load-inputfun (quote input-funbox) "tolerance" "TOL" 0))) (om-make-point 623 236) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-GRAPH" (quote make-graph) (quote ((om-load-inputfun (quote input-funbox) "A chordseq, a list of chords, a list of list of midics" "COLL" nil))) (om-make-point 47 220) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 4 2 nil 0) (2 0 4 3 nil 0) (24 0 5 0 nil 0) (4 0 5 1 nil 0) (5 0 6 0 nil 0) (6 0 7 0 nil 0) (9 0 8 0 nil 0) (7 0 9 0 nil 0) (16 0 14 0 nil 0) (14 0 15 0 nil 0) (19 0 16 0 nil 0) (20 0 17 0 nil 0) (22 0 18 0 nil 0) (21 0 19 0 nil 0) (27 0 20 0 nil 0) (24 0 21 0 nil 0) (26 0 21 1 nil 0) (17 0 22 0 nil 0) (25 0 26 0 nil 0) (23 0 26 1 nil 0) (24 0 27 0 nil 0))) nil 7.05))
